// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package googletokengenerator.actions;

import java.io.BufferedReader;
import java.io.StringReader;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.interfaces.RSAPrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class BigQueryAuthentication extends CustomJavaAction<java.lang.String>
{
	private java.lang.String PrivateKey;
	private java.lang.String IssAccountDetails;
	private java.lang.String ScopeUrl;
	private java.lang.String PrivateKeyId;
	private java.lang.String Audience;
	private java.lang.Long MilliSeconds;

	public BigQueryAuthentication(IContext context, java.lang.String PrivateKey, java.lang.String IssAccountDetails, java.lang.String ScopeUrl, java.lang.String PrivateKeyId, java.lang.String Audience, java.lang.Long MilliSeconds)
	{
		super(context);
		this.PrivateKey = PrivateKey;
		this.IssAccountDetails = IssAccountDetails;
		this.ScopeUrl = ScopeUrl;
		this.PrivateKeyId = PrivateKeyId;
		this.Audience = Audience;
		this.MilliSeconds = MilliSeconds;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		  String PRIVATE_KEY = this.PrivateKey;
	      // Read in the key into a String
	    StringBuilder pkcs8Lines = new StringBuilder();
	    BufferedReader rdr = new BufferedReader(new StringReader(this.PrivateKey));
	    String line;
	    while ((line = rdr.readLine()) != null) {
	        pkcs8Lines.append(line);
	    }
	    // Remove the "BEGIN" and "END" lines, as well as any whitespace
	    String pkcs8Pem = pkcs8Lines.toString();
	    pkcs8Pem = pkcs8Pem.replace("-----BEGIN PRIVATE KEY-----", "");
	    pkcs8Pem = pkcs8Pem.replace("-----END PRIVATE KEY-----", "");
	    pkcs8Pem = pkcs8Pem.replaceAll("\\s+","");
	    //pkcs8Pem = pkcs8Pem.replaceAll("\n+","");

	    byte [] pkcs8EncodedBytes = Base64.getDecoder().decode(pkcs8Pem);
	    // extract the private key
	    PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);
	    KeyFactory kf = KeyFactory.getInstance("RSA");
	    PrivateKey privKey = kf.generatePrivate(keySpec);
	    //System.out.println(privKey);

	     String privateKeyId = this.PrivateKeyId;
	     long now = System.currentTimeMillis();     
	     HashMap<String, Object> map = new HashMap<String,Object>();
	     //Map map = new HashMap<String,Object>();
	     map.put("alg","RS256");
	     map.put("typ","JWT");
	     Algorithm algorithm = Algorithm.RSA256(null, (RSAPrivateKey) privKey);
	     String signedJwt = JWT.create()
			   .withKeyId(privateKeyId)
			   .withHeader(map)
			   .withClaim("iss", this.IssAccountDetails)
			   .withClaim("scope", this.ScopeUrl)
			   .withClaim("aud", this.Audience)
			   .withClaim("exp", new Date(now + this.MilliSeconds * 1000L))
			   .withClaim("iat", new Date(now))
			   .sign(algorithm);
			   
			return signedJwt;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "BigQueryAuthentication";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
